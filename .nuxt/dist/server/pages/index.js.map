{"version":3,"file":"pages/index.js","sources":["webpack:///./mixins.js/Mixin2.js","webpack:///./pages/index.vue","webpack:///./pages/index.vue?f1e1","webpack:///./pages/index.vue?d8d0","webpack:///./pages/index.vue?6000","webpack:///./pages/index.vue?b1ff","webpack:///./pages/index.vue?b245"],"sourcesContent":["\r\nconst mix2 = {\r\n    data: function () {\r\n        return {\r\n            classs: 'transform: translateY(-90px)',\r\n            isOpen: 'Видеокарта',\r\n            isOn: true,\r\n            \r\n            // w1sub: 0.01,\r\n            // w2sub: 0.01,\r\n            // w3sub: 0.01,\r\n            // w4sub: 0.01,\r\n            page: 0,\r\n            // budget: 1000000,\r\n            help: 'Сайт для подсчёта рейтингов комплектующи* с помощью весовы* коэффициентов и создания лучши* подборок с использование рейтингов. Выполнено в рамка* магистерской работы.',\r\n           \r\n        }\r\n    }\r\n}\r\nexport default mix2","\r\n\r\n// import Mixin from '~/mixins.js/Mixin.js'\r\nimport Mixin2 from '~/mixins.js/Mixin2.js'\r\n\r\n\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  mixins: [Mixin2],\r\n  layout: 'lay1',\r\n  setup() {\r\n    function arrayFilt(x) {\r\n      if (x.type === 'Видеокарта'\r\n        && x.name.toLowerCase().indexOf(this.getfiltVidName.toLowerCase()) !== -1\r\n        && x['memory'] >= this.getfiltVidMemory) {\r\n        return x\r\n      }\r\n      if (x.type === 'Процессор'\r\n        && x.name.toLowerCase().indexOf(this.getfiltProcName.toLowerCase()) !== -1) {\r\n        return x\r\n      }\r\n      if (x.type === 'Оперативная память') {\r\n        return x\r\n      }\r\n      if (x.type === 'Материнская плата') {\r\n        return x\r\n      }\r\n \r\n    }\r\n    return { arrayFilt }\r\n  },\r\n  async asyncData({ $axios }) {\r\n    try {\r\n      const posts = await $axios.$get('http://localhost:8080/api/document')\r\n      return { posts }\r\n    } catch (error) {\r\n      const posts = []\r\n      return {posts}\r\n    }\r\n\r\n  },\r\n  computed: {\r\n    ...mapGetters('datas', ['getCoefficients']),\r\n    ...mapGetters('datas', ['getBudget']),\r\n    ...mapGetters('datas', ['getfiltVidName']),\r\n    ...mapGetters('datas', ['getfiltVidMemory']),\r\n\r\n    ...mapGetters('datas', ['getfiltProcName']),\r\n    rendData() {\r\n      \r\n      const data = this.posts\r\n      /////////////////////////видеокарта///////////////////////////////////\r\n      let толькочастотавидеокарты = { список: [] }\r\n      let толькопамятьвидеокарты = { список: [] }\r\n      let ТолькоЧастотаПамятиВидеокарты = { список: [] }\r\n      let ТолькоТехпроцессВидеокарты = { список: [] }\r\n      let ТолькоРазрядностьШиныПамяти = { список: [] }\r\n      /////////////////////////Процессор///////////////////////////////////\r\n      let толькочастотапроцессора = { список: [] }\r\n      let толькочислопотоков = { список: [] }\r\n      let ТолькоКоличествоЯдер = { список: [] }\r\n      let ТолькоКоличествоКаналов = { список: [] }\r\n      let ТолькоЧастотаГрафическогоЯдра = { список: [] }\r\n      let ТолькоЧастотаПамятиПроцессора = { список: [] }\r\n      // /////////////////////////Оперативная память///////////////////////////////////\r\n      let толькообъем = { список: [] }\r\n      let толькочастотаоперативки = { список: [] }\r\n      let ТолькоКоличествоМодулей = { список: [] }\r\n      let ТолькоОбъемМодуля = { список: [] }\r\n      /////////////////////////Материнская плата///////////////////////////////////\r\n      let ТолькоМаксимальнаяЧастотаПамяти = { список: [] }\r\n      let ТолькоМаксимальныйОбъемПамяти = { список: [] }\r\n      let ТолькоКоличествоКаналовПамяти = { список: [] }\r\n      let ТолькоКоличествоСлотовPCIE1 = { список: [] }\r\n      let ТолькоКоличествоСлотовПамяти = { список: [] }\r\n\r\n      let allItems1 = data.map(x => {\r\n        console.log(x)\r\n        if (x['type'] === 'Видеокарта') {\r\n          x['memory'] = Number(x['memory'])\r\n          x['frequency'] = Number(x['frequency'])\r\n          x['frequencymemory'] = Number(x['frequencymemory'])\r\n          x['processtechnology'] = Number(x['processtechnology'])\r\n          x['memorybuswidth'] = Number(x['memorybuswidth'])\r\n          // typeofmemory\r\n          толькочастотавидеокарты.список.push(Number(x['frequency']))\r\n          толькопамятьвидеокарты.список.push(Number(x['memory']))\r\n          ТолькоЧастотаПамятиВидеокарты.список.push(Number(x['frequencymemory']))\r\n          ТолькоТехпроцессВидеокарты.список.push(Number(x['processtechnology']))\r\n          ТолькоРазрядностьШиныПамяти.список.push(Number(x['memorybuswidth']))\r\n          x.transformations = {\r\n            норм: {\r\n              частоставидеокарты: 0,\r\n              памятьвидеокарты: 0,\r\n              ЧастотаПамяти: 0,\r\n              Техпроцесс: 0,\r\n              РазрядностьШиныПамяти: 0,\r\n            }, рейтинг: 0\r\n          }\r\n        }\r\n        if (x['type'] === 'Процессор') {\r\n          x['frequency'] = Number(x['frequency'])\r\n          x['numberofthreads'] = Number(x['numberofthreads'])\r\n          x['numberofcores'] = Number(x['numberofcores'])\r\n          x['numberofchannels'] = Number(x['numberofchannels'])\r\n          x['graphicscorefrequency'] = (x['graphicscorefrequency'])\r\n          // x ['ЧастотаПамяти'] = Number(x ['ЧастотаПамяти'])\r\n          толькочастотапроцессора.список.push(Number(x['frequency']))\r\n          толькочислопотоков.список.push(Number(x['numberofthreads']))\r\n          ТолькоКоличествоЯдер.список.push(Number(x['numberofcores']))\r\n          ТолькоКоличествоКаналов.список.push(Number(x['numberofchannels']))\r\n          ТолькоЧастотаГрафическогоЯдра.список.push((x['graphicscorefrequency']))\r\n          // ТолькоЧастотаПамятиПроцессора.список.push(Number(x ['ЧастотаПамяти']))\r\n          x.transformations = {\r\n            норм: {\r\n              частостапроцессора: 0,\r\n              числопотоков: 0,\r\n              КоличествоЯдер: 0,\r\n              КоличествоКаналов: 0,\r\n              ЧастотаГрафическогоЯдра: 0,\r\n              ЧастотаПамяти: 0,\r\n            }, рейтинг: 0\r\n          }\r\n        }\r\n        if (x['type'] === 'Оперативная память') {\r\n          console.log(\"x['frequency']\", x['frequency'])\r\n          x['capacity'] = Number(eval(x['capacity']))\r\n          x['frequency'] = Number(x['frequency'])\r\n          x['numberofmodules'] = Number(x['numberofmodules'])\r\n          x['volumemodule'] = Number(x['volumemodule'])\r\n          толькообъем.список.push(Number(x['capacity']))\r\n          толькочастотаоперативки.список.push(Number(x['frequency']))\r\n          ТолькоКоличествоМодулей.список.push(Number(x['numberofmodules']))\r\n          ТолькоОбъемМодуля.список.push(Number(x['volumemodule']))\r\n          x.transformations = { норм: { объем: 0, частотаоперативки: 0, КоличествоМодулей: 0, ОбъемМодуля: 0 }, рейтинг: 0 }\r\n        }\r\n        if (x['type'] === 'Материнская плата') {\r\n          x['maxmemoryfrequency'] = Number(x['maxmemoryfrequency'])\r\n          x['maxmemory'] = Number(x['maxmemory'])\r\n          x['numberofmemorychannels'] = Number(x['numberofmemorychannels'])\r\n          x['numberofslotspcie1'] = Number(x['numberofslotspcie1'])\r\n          x['numberofmemoryslots'] = Number(x['numberofmemoryslots'])\r\n          ТолькоМаксимальнаяЧастотаПамяти.список.push(Number(x['maxmemoryfrequency']))\r\n          ТолькоМаксимальныйОбъемПамяти.список.push(Number(x['maxmemory']))\r\n          ТолькоКоличествоКаналовПамяти.список.push(Number(x['numberofmemorychannels']))\r\n          ТолькоКоличествоСлотовPCIE1.список.push(Number(x['numberofslotspcie1']))\r\n          ТолькоКоличествоСлотовПамяти.список.push(Number(x['numberofmemoryslots']))\r\n          x.transformations = { норм: { объем: 0, частотаоперативки: 0, КоличествоМодулей: 0, ОбъемМодуля: 0 }, рейтинг: 0 }\r\n        }\r\n        x['price'] = Number(x['price'])\r\n        return x\r\n      })\r\n      // allItems1.map(x => {\r\n      //   if (x['type'] === 'Видеокарта') {\r\n      //     толькочастотавидеокарты.список.push(Number(x['frequency']))\r\n      //     толькопамятьвидеокарты.список.push(Number(x['memory']))\r\n      //     ТолькоЧастотаПамятиВидеокарты.список.push(Number(x['frequencymemory']))\r\n      //     ТолькоТехпроцессВидеокарты.список.push(Number(x['processtechnology']))\r\n      //     ТолькоРазрядностьШиныПамяти.список.push(Number(x['memorybuswidth']))\r\n      //     x.transformations = {\r\n      //       норм: {\r\n      //         частоставидеокарты: 0,\r\n      //         памятьвидеокарты: 0,\r\n      //         ЧастотаПамяти: 0,\r\n      //         Техпроцесс: 0,\r\n      //         РазрядностьШиныПамяти: 0,\r\n      //       }, рейтинг: 0\r\n      //     }\r\n      //   }\r\n\r\n      //   if (x['type'] === 'Процессор') {\r\n      //     толькочастотапроцессора.список.push(Number(x['frequency']))\r\n      //     толькочислопотоков.список.push(Number(x['numberofthreads']))\r\n      //     ТолькоКоличествоЯдер.список.push(Number(x['numberofcores']))\r\n      //     ТолькоКоличествоКаналов.список.push(Number(x['numberofchannels']))\r\n      //     ТолькоЧастотаГрафическогоЯдра.список.push((x['graphicscorefrequency']))\r\n      //     // ТолькоЧастотаПамятиПроцессора.список.push(Number(x ['ЧастотаПамяти']))\r\n      //     x.transformations = {\r\n      //       норм: {\r\n      //         частостапроцессора: 0,\r\n      //         числопотоков: 0,\r\n      //         КоличествоЯдер: 0,\r\n      //         КоличествоКаналов: 0,\r\n      //         ЧастотаГрафическогоЯдра: 0,\r\n      //         ЧастотаПамяти: 0,\r\n      //       }, рейтинг: 0\r\n      //     }\r\n      //   }\r\n\r\n      //   if (x['type'] === 'Оперативная память') {\r\n      //     толькообъем.список.push(Number(x['capacity']))\r\n      //     толькочастотаоперативки.список.push(Number(x['frequency']))\r\n      //     ТолькоКоличествоМодулей.список.push(Number(x['numberofmodules']))\r\n      //     ТолькоОбъемМодуля.список.push(Number(x['volumemodule']))\r\n      //     x.transformations = { норм: { объем: 0, частотаоперативки: 0, КоличествоМодулей: 0, ОбъемМодуля: 0 }, рейтинг: 0 }\r\n      //   }\r\n\r\n\r\n      //   if (x['type'] === 'Материнская плата') {\r\n      //     ТолькоМаксимальнаяЧастотаПамяти.список.push(Number(x['maxmemoryfrequency']))\r\n      //     ТолькоМаксимальныйОбъемПамяти.список.push(Number(x['maxmemory']))\r\n      //     ТолькоКоличествоКаналовПамяти.список.push(Number(x['numberofmemorychannels']))\r\n      //     ТолькоКоличествоСлотовPCIE1.список.push(Number(x['numberofslotspcie1']))\r\n      //     ТолькоКоличествоСлотовПамяти.список.push(Number(x['numberofmemoryslots']))\r\n      //     x.transformations = { норм: { объем: 0, частотаоперативки: 0, КоличествоМодулей: 0, ОбъемМодуля: 0 }, рейтинг: 0 }\r\n      //   }\r\n      //   return x\r\n      // })\r\n\r\n      function getOfArray(numArray) {\r\n        let max = 0\r\n        let min = numArray[0]\r\n\r\n        numArray.forEach(x => {\r\n          if (x > max) { max = x }\r\n          if (x < min) { min = x }\r\n        })\r\n        return { max: max, min: min }\r\n      }\r\n\r\n      //Видеокарта\r\n      толькочастотавидеокарты.мах = getOfArray(толькочастотавидеокарты.список).max\r\n      толькочастотавидеокарты.мин = getOfArray(толькочастотавидеокарты.список).min\r\n      толькопамятьвидеокарты.мах = getOfArray(толькопамятьвидеокарты.список).max\r\n      толькопамятьвидеокарты.мин = getOfArray(толькопамятьвидеокарты.список).min\r\n      ТолькоЧастотаПамятиВидеокарты.мах = getOfArray(ТолькоЧастотаПамятиВидеокарты.список).max\r\n      ТолькоЧастотаПамятиВидеокарты.мин = getOfArray(ТолькоЧастотаПамятиВидеокарты.список).min\r\n      ТолькоТехпроцессВидеокарты.мах = getOfArray(ТолькоТехпроцессВидеокарты.список).max\r\n      ТолькоТехпроцессВидеокарты.мин = getOfArray(ТолькоТехпроцессВидеокарты.список).min\r\n      ТолькоРазрядностьШиныПамяти.мах = getOfArray(ТолькоРазрядностьШиныПамяти.список).max\r\n      ТолькоРазрядностьШиныПамяти.мин = getOfArray(ТолькоРазрядностьШиныПамяти.список).min\r\n\r\n\r\n      //Процессор\r\n      толькочастотапроцессора.мах = getOfArray(толькочастотапроцессора.список).max\r\n      толькочастотапроцессора.мин = getOfArray(толькочастотапроцессора.список).min\r\n      толькочислопотоков.мах = getOfArray(толькочислопотоков.список).max\r\n      толькочислопотоков.мин = getOfArray(толькочислопотоков.список).min\r\n\r\n      ТолькоКоличествоЯдер.мах = getOfArray(ТолькоКоличествоЯдер.список).max\r\n      ТолькоКоличествоЯдер.мин = getOfArray(ТолькоКоличествоЯдер.список).min\r\n      ТолькоКоличествоКаналов.мах = getOfArray(ТолькоКоличествоКаналов.список).max\r\n      ТолькоКоличествоКаналов.мин = getOfArray(ТолькоКоличествоКаналов.список).min\r\n      ТолькоЧастотаГрафическогоЯдра.мах = getOfArray(ТолькоЧастотаГрафическогоЯдра.список).max\r\n      ТолькоЧастотаГрафическогоЯдра.мин = getOfArray(ТолькоЧастотаГрафическогоЯдра.список).min\r\n      // ТолькоЧастотаПамятиПроцессора.мах = getOfArray(ТолькоЧастотаПамятиПроцессора.список).max\r\n      // ТолькоЧастотаПамятиПроцессора.мин = getOfArray(ТолькоЧастотаПамятиПроцессора.список).min\r\n\r\n\r\n      //Оперативка\r\n      толькообъем.мах = getOfArray(толькообъем.список).max\r\n      толькообъем.мин = getOfArray(толькообъем.список).min\r\n      толькочастотаоперативки.мах = getOfArray(толькочастотаоперативки.список).max\r\n      толькочастотаоперативки.мин = getOfArray(толькочастотаоперативки.список).min\r\n      ТолькоКоличествоМодулей.мах = getOfArray(ТолькоКоличествоМодулей.список).max\r\n      ТолькоКоличествоМодулей.мин = getOfArray(ТолькоКоличествоМодулей.список).min\r\n      ТолькоОбъемМодуля.мах = getOfArray(ТолькоОбъемМодуля.список).max\r\n      ТолькоОбъемМодуля.мин = getOfArray(ТолькоОбъемМодуля.список).min\r\n\r\n\r\n      //Материнская плата\r\n      ТолькоМаксимальнаяЧастотаПамяти.мах = getOfArray(ТолькоМаксимальнаяЧастотаПамяти.список).max\r\n      ТолькоМаксимальнаяЧастотаПамяти.мин = getOfArray(ТолькоМаксимальнаяЧастотаПамяти.список).min\r\n      ТолькоМаксимальныйОбъемПамяти.мах = getOfArray(ТолькоМаксимальныйОбъемПамяти.список).max\r\n      ТолькоМаксимальныйОбъемПамяти.мин = getOfArray(ТолькоМаксимальныйОбъемПамяти.список).min\r\n      ТолькоКоличествоКаналовПамяти.мах = getOfArray(ТолькоКоличествоКаналовПамяти.список).max\r\n      ТолькоКоличествоКаналовПамяти.мин = getOfArray(ТолькоКоличествоКаналовПамяти.список).min\r\n      ТолькоКоличествоСлотовPCIE1.мах = getOfArray(ТолькоКоличествоСлотовPCIE1.список).max\r\n      ТолькоКоличествоСлотовPCIE1.мин = getOfArray(ТолькоКоличествоСлотовPCIE1.список).min\r\n      ТолькоКоличествоСлотовПамяти.мах = getOfArray(ТолькоКоличествоСлотовПамяти.список).max\r\n      ТолькоКоличествоСлотовПамяти.мин = getOfArray(ТолькоКоличествоСлотовПамяти.список).min\r\n\r\n      allItems1.map(x => {\r\n        if (x['type'] === 'Видеокарта') {\r\n          x.transformations.норм.частоставидеокарты = x['frequency'] / толькочастотавидеокарты.мах\r\n          x.transformations.норм.памятьвидеокарты = x['memory'] / толькопамятьвидеокарты.мах\r\n          x.transformations.норм.ЧастотаПамяти = x['frequencymemory'] / ТолькоЧастотаПамятиВидеокарты.мах\r\n          x.transformations.норм.Техпроцесс = x['processtechnology'] / ТолькоТехпроцессВидеокарты.мах\r\n          x.transformations.норм.РазрядностьШиныПамяти = x['memorybuswidth'] / ТолькоРазрядностьШиныПамяти.мах\r\n          x.transformations.рейтинг = (x.transformations.норм.частоставидеокарты + x.transformations.норм.памятьвидеокарты + x.transformations.норм.ЧастотаПамяти - x.transformations.норм.Техпроцесс + x.transformations.норм.РазрядностьШиныПамяти) * this.getCoefficients.w1\r\n        }\r\n        if (x['type'] === 'Процессор') {\r\n          x.transformations.норм.частостапроцессора = x['frequency'] / толькочастотапроцессора.мах\r\n          x.transformations.норм.числопотоков = x['numberofthreads'] / толькочислопотоков.мах\r\n          x.transformations.норм.КоличествоЯдер = x['numberofcores'] / ТолькоКоличествоЯдер.мах\r\n          x.transformations.норм.КоличествоКаналов = x['numberofchannels'] / ТолькоКоличествоКаналов.мах\r\n          x.transformations.норм.ЧастотаГрафическогоЯдра = x['graphicscorefrequency'] / ТолькоЧастотаГрафическогоЯдра.мах\r\n          // x.transformations.норм.ЧастотаПамяти = x ['ЧастотаПамяти'] / ТолькоЧастотаПамятиПроцессора.мах\r\n          x.transformations.рейтинг = (x.transformations.норм.частостапроцессора + x.transformations.норм.числопотоков + x.transformations.норм.КоличествоЯдер + x.transformations.норм.КоличествоКаналов + x.transformations.норм.ЧастотаГрафическогоЯдра) * this.getCoefficients.w2\r\n        }\r\n        if (x['type'] === 'Оперативная память') {\r\n          x.transformations.норм.объем = x['capacity'] / толькообъем.мах\r\n          x.transformations.норм.частотаоперативки = x['frequency'] / толькочастотаоперативки.мах\r\n          x.transformations.норм.КоличествоМодулей = x['numberofmodules'] / ТолькоКоличествоМодулей.мах\r\n          x.transformations.норм.ОбъемМодуля = x['volumemodule'] / ТолькоОбъемМодуля.мах\r\n          x.transformations.рейтинг = (x.transformations.норм.объем + x.transformations.норм.частотаоперативки + x.transformations.норм.КоличествоМодулей + x.transformations.норм.ОбъемМодуля) * this.getCoefficients.w3\r\n        }\r\n        if (x['type'] === 'Материнская плата') {\r\n          x.transformations.норм.МаксимальнаяЧастотаПамяти = x['maxmemoryfrequency'] / ТолькоМаксимальнаяЧастотаПамяти.мах\r\n          x.transformations.норм.МаксимальныйОбъемПамяти = x['maxmemory'] / ТолькоМаксимальныйОбъемПамяти.мах\r\n          x.transformations.норм.КоличествоКаналовПамяти = x['numberofmemorychannels'] / ТолькоКоличествоКаналовПамяти.мах\r\n          x.transformations.норм.КоличествоСлотовPCIE1 = x['numberofslotspcie1'] / ТолькоКоличествоСлотовPCIE1.мах\r\n          x.transformations.норм.КоличествоСлотовПамяти = x['numberofmemoryslots'] / ТолькоКоличествоСлотовПамяти.мах\r\n          x.transformations.рейтинг = (x.transformations.норм.МаксимальнаяЧастотаПамяти + x.transformations.норм.МаксимальныйОбъемПамяти + x.transformations.норм.КоличествоКаналовПамяти + x.transformations.норм.КоличествоСлотовPCIE1 + x.transformations.норм.КоличествоСлотовПамяти) * this.getCoefficients.w4\r\n        }\r\n        return x\r\n      })\r\n      return allItems1.filter(x => this.arrayFilt(x))\r\n\r\n\r\n    },\r\n    allitems3() {\r\n      let alls = []\r\n      let videokards = []\r\n      let processors = []\r\n      let memories = []\r\n      let motherboard = []\r\n      this.rendData.forEach(x => {\r\n        switch (x['type']) {\r\n          case 'Видеокарта':\r\n            return videokards.push(x)\r\n          case 'Процессор':\r\n            return processors.push(x)\r\n          case 'Оперативная память':\r\n            return memories.push(x)\r\n          case 'Материнская плата':\r\n            return motherboard.push(x)\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n\r\n      videokards.sort((a, b) => b.transformations.рейтинг - a.transformations.рейтинг)\r\n      processors.sort((a, b) => b.transformations.рейтинг - a.transformations.рейтинг)\r\n      memories.sort((a, b) => b.transformations.рейтинг - a.transformations.рейтинг)\r\n      motherboard.sort((a, b) => b.transformations.рейтинг - a.transformations.рейтинг)\r\n\r\n      if (videokards.length > 20) { videokards.length = 20 }\r\n      if (processors.length > 20) { processors.length = 20 }\r\n      if (memories.length > 20) { memories.length = 20 }\r\n      if (motherboard.length > 20) { motherboard.length = 20 }\r\n\r\n\r\n      videokards.map(x => {\r\n        processors.map(y => {\r\n          memories.map(z => {\r\n            motherboard.map(f => {\r\n              alls.push({\r\n                список: [x, y, z, f],\r\n                общийрейтинг: x.transformations.рейтинг + y.transformations.рейтинг + z.transformations.рейтинг + f.transformations.рейтинг,\r\n                общаяцена: x['price'] + y['price'] + z['price'] + f['price']\r\n              })\r\n              return f\r\n            })\r\n            return z\r\n          })\r\n          return y\r\n        })\r\n        return x\r\n      })\r\n      return alls\r\n    },\r\n  },\r\n}\r\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--3-oneOf-1-2!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=0799dd08&prod&lang=css&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"9f1086ac\", content, true, context)\n};","export * from \"-!../node_modules/vue-style-loader/index.js??ref--3-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--3-oneOf-1-2!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=0799dd08&prod&lang=css&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".error{position:fixed;height:100vh;width:100vw;display:flex;justify-content:center;align-items:center}.error h1{color:#06ffb4}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=0799dd08&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./index.vue?vue&type=style&index=0&id=0799dd08&prod&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"7cf8da4e\"\n  \n)\n\nexport default component.exports"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AHNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AIFA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}